<?php

/**
 * @author Harry Qin (zergling9999@hotmail.com)
 *
 * @file
 * Intergrate ShipWorks application into Drupal Commerce.
 *
 * NOTE: I did not implement commerce_shipworks_action_update_shipment, for i can not find how to trigger it in ShipWorks.
 *
 * TODO: commerce_shipworks_action_update_shipment implement.
 * TODO: show postlog records on Drupal admin backend.
 * TODO: store shipping tracking number when ShipWroks upload it.
 * TODO: product weight.
 * TODO: payment intergration.
 * TODO: shipping method intergration.
 */

define("COMMERCE_SHIPWORKS_PLATFORM", "Drupal Commerce 7.x-1.x");
define("COMMERCE_SHIPWORKS_DEVELOPER", "Harry Qin (zergling9999@hotmail.com)");
define("COMMERCE_SHIPWORKS_MODULE_VERSION", "3.0.0");
define("COMMERCE_SHIPWORKS_SCHEMA_VERSION", "1.0.0");

/**
 * Implements hook_permission().
 */
function commerce_shipworks_permission() {
  return array(
    'administer shipworks' => array(
      'title' => t('Administer shipworks'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function commerce_shipworks_menu() {
  $items = array();

  $items['admin/commerce/config/shipworks'] = array(
    'title' => 'Shipworks',
    'description' => 'Manage shipworks configurations.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_shipworks_config_form'),
    'access arguments' => array('administer shipworks'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['commerce/shipworks/api'] = array(
    'title' => 'Commerce shipworks api',
    'page callback' => 'commerce_shipworks_api',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Administer shipworks configurations form.
 */
function commerce_shipworks_config_form($form, &$form_state) {
  $form['commerce_shipworks_api_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Shipworks API username'),
    '#default_value' => variable_get('commerce_shipworks_api_username', ''),
    '#size' => 40,
    '#maxlength' => 120,
    '#required' => TRUE,
  );
  
  $form['commerce_shipworks_api_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Shipworks API password'),
    '#default_value' => variable_get('commerce_shipworks_api_password', ''),
    '#size' => 40,
    '#maxlength' => 120,
    '#required' => TRUE,
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save settings'),
  );

  return $form;
}

/**
 * Save shipworks configurations.
 */
function commerce_shipworks_config_form_submit($form, &$form_state) {
  variable_set('commerce_shipworks_api_username', $form_state['values']['commerce_shipworks_api_username']);
  variable_set('commerce_shipworks_api_password', $form_state['values']['commerce_shipworks_api_password']);
  drupal_set_message(t('The settings have been saved'));
}

/**
 * Shipworks api for http requests.
 */
function commerce_shipworks_api() {
  // using output buffering to get around headers that magento is setting after we've started output
  ob_start();

  header("Content-Type: text/xml;charset=utf-8");
  header("Last-Modified: " . gmdate("D, d M Y H:i:s") . " GMT");

  // HTTP/1.1
  header("Cache-Control: no-store, no-cache, must-revalidate");
  header("Cache-Control: post-check=0, pre-check=0", false);

  // HTTP/1.0
  header("Pragma: no-cache");

  if ($_SERVER['REQUEST_METHOD'] == 'GET') {
    $request_values = $_GET;
  } elseif ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $request_values = $_POST;
  }

  $postvalues = "REQUEST_METHOD: " . $_SERVER['REQUEST_METHOD'] . "\n";
  $postvalues .= "post values:\n";
  if (isset($request_values)) {
    foreach ($request_values as $key => $value) {
      if ($key != 'q') {
        $postvalues .= "  " . $key . ": " . $value . "\n";
      }
    }
  }
  
  $postlog_id = db_insert('commerce_shipworks_postlog')
  ->fields(array(
    'postvalues' => $postvalues,
    'created' => REQUEST_TIME,
  ))
  ->execute();

  // TODO: store output information.

  // Open the XML output and root
  commerce_shipworks_write_xml_declaration();
  commerce_shipworks_write_start_tag("ShipWorks", array("moduleVersion" => COMMERCE_SHIPWORKS_MODULE_VERSION, "schemaVersion" => COMMERCE_SHIPWORKS_SCHEMA_VERSION));

  // If the admin module is installed, we make use of it
  if (commerce_shipworks_check_admin_login()) {
    $action = (isset($_REQUEST['action']) ? $_REQUEST['action'] : '');
    switch (strtolower($action)) {
      case 'getmodule': commerce_shipworks_action_get_module(); break;
      case 'getstore': commerce_shipworks_action_get_store(); break;
      case 'getcount': commerce_shipworks_action_get_count(); break;
      case 'getorders': commerce_shipworks_action_get_orders(); break;
      case 'getstatuscodes': commerce_shipworks_action_get_status_codes(); break;
      case 'updateorder': commerce_shipworks_action_update_order(); break;
      case 'updatestatus': commerce_shipworks_action_update_status(); break;
      case 'updateshipment': commerce_shipworks_action_update_shipment(); break;
      default:
        commerce_shipworks_output_error(1, t('Action \'@action\' is not supported.', array('@action' => $action)));
    }
  } else {
    commerce_shipworks_output_error(2, t('Verification failed.'));
  }

  // Close the output
  commerce_shipworks_write_close_tag("ShipWorks");

  db_update('commerce_shipworks_postlog')
  ->fields(array(
    'success' => 1,
  ))
  ->condition('postlog_id', $postlog_id)
  ->execute();

  // end output
  ob_end_flush();
}

/**
 * Write module data
 */
function commerce_shipworks_action_get_module()
{
  commerce_shipworks_write_start_tag("Module");
  
    commerce_shipworks_write_element("Platform", COMMERCE_SHIPWORKS_PLATFORM);
    commerce_shipworks_write_element("Developer", COMMERCE_SHIPWORKS_DEVELOPER);

    commerce_shipworks_write_start_tag("Capabilities");
      commerce_shipworks_write_element("DownloadStrategy", "ByModifiedTime");
      commerce_shipworks_write_full_element("OnlineCustomerID", "", array("supported" => "true", "dataType" => "numeric"));
      commerce_shipworks_write_full_element("OnlineStatus", "", array("supported" => "true", "dataType" => "text", "downloadOnly" => "false" ));
      commerce_shipworks_write_full_element("OnlineShipmentUpdate", "", array("supported" => "true"));
    commerce_shipworks_write_close_tag("Capabilities");
  
  commerce_shipworks_write_close_tag("Module");
}

/**
 * Write store data
 */
function commerce_shipworks_action_get_store()
{
  $name = variable_get('site_name', '');
  $email = variable_get('site_mail', '');
  $country = variable_get('site_default_country', '');
  $website = url('<front>', array('absolute' => TRUE));

  commerce_shipworks_write_start_tag("Store");
    commerce_shipworks_write_element("Name", $name);
    commerce_shipworks_write_element("Email", $email);
    commerce_shipworks_write_element("Country", $country);
    commerce_shipworks_write_element("Website", $website);
  commerce_shipworks_write_close_tag("Store");
}

/**
 * Returns the status codes for the store
 */
function commerce_shipworks_action_get_status_codes() {

  $statuses = commerce_order_states();

  commerce_shipworks_write_start_tag("StatusCodes");
  foreach ($statuses as $status) {
    commerce_shipworks_write_start_tag("StatusCode");
      commerce_shipworks_write_element("Code", $status['name']);
      commerce_shipworks_write_element("Name", $status['title']);
    commerce_shipworks_write_close_tag("StatusCode");
  }
  commerce_shipworks_write_close_tag("StatusCodes");
}

/**
 * Get the count of orders greater than the start ID
 */
function commerce_shipworks_action_get_count()
{         
  $start = 0;

  if (isset($_REQUEST['start'])) {
    $start = $_REQUEST['start'];
  }

  // Convert to local SQL time
  $start_utc = commerce_shipworks_to_timestamp($start);
  $start = commerce_shipworks_to_local_sql_date($start);

  // only get orders through 2 seconds ago
  $end_utc = time() - 2;
  $end = date("Y-m-d H:i:s", $end_utc);

  if ($start_utc) {
    $order_count = db_query(
      'SELECT COUNT(order_id) FROM {commerce_order} WHERE status NOT LIKE \'checkout_%\' AND status <> \'cart\' AND changed > :start_utc AND changed <= :end_utc',
      array(
        ':start_utc' => $start_utc,
        ':end_utc' => $end_utc,
      )
    )
    ->fetchField();
  } else {
    $order_count = 0;
  }

  // Write the params for easier diagnostics
  commerce_shipworks_write_start_tag("Parameters");
    commerce_shipworks_write_element("StartUTC", $start_utc);
    commerce_shipworks_write_element("Start", $start);
    commerce_shipworks_write_element("EndUTC", $end_utc);
    commerce_shipworks_write_element("End", $end);
  commerce_shipworks_write_close_tag("Parameters");

  commerce_shipworks_write_element("OrderCount", $order_count);
}

/**
 * Get all orders greater than the given start id, limited by max count
 */
function commerce_shipworks_action_get_orders() {
  $start = 0;

  if (isset($_REQUEST['start'])) {
    $start = $_REQUEST['start'];
  }

  // Convert to local SQL time
  $start_utc = commerce_shipworks_to_timestamp($start);
  $start = commerce_shipworks_to_local_sql_date($start);

  // only get orders through 2 seconds ago
  $end_utc = time() - 2;
  $end = date("Y-m-d H:i:s", $end_utc);

  $maxcount = isset($_REQUEST['maxcount']) ? (int) $_REQUEST['maxcount'] : 999999;

  // Write the params for easier diagnostics
  commerce_shipworks_write_start_tag("Parameters");
    commerce_shipworks_write_element("StartUTC", $start_utc);
    commerce_shipworks_write_element("Start", $start);
    commerce_shipworks_write_element("EndUTC", $end_utc);
    commerce_shipworks_write_element("End", $end);
    commerce_shipworks_write_element("MaxCount", $maxcount);
  commerce_shipworks_write_close_tag("Parameters");

  $orders = array();

  if ($start_utc) {
    $result = db_query('SELECT order_id FROM {commerce_order} WHERE status NOT LIKE \'checkout_%\' AND status <> \'cart\' AND changed > :start_utc AND changed <= :end_utc ORDER BY changed LIMIT 0, ' . $maxcount,
      array(
        ':start_utc' => $start_utc,
        ':end_utc' => $end_utc,
      )
    );
    foreach ($result as $record) {
      $order_id = $record->order_id;
      $order_object = commerce_order_load($order_id);
      $profile_id_shipping = field_get_items('commerce_order', $order_object, 'commerce_customer_shipping')[0]['profile_id'];
      $profile_object_shipping = commerce_customer_profile_load($profile_id_shipping);
      $customer_address_shipping = field_get_items('commerce_customer_profile', $profile_object_shipping, 'commerce_customer_address')[0];
      $profile_id_billing = field_get_items('commerce_order', $order_object, 'commerce_customer_billing')[0]['profile_id'];
      $profile_object_billing = commerce_customer_profile_load($profile_id_billing);
      $customer_address_billing = field_get_items('commerce_customer_profile', $profile_object_billing, 'commerce_customer_address')[0];
      $fields_line_items = field_get_items('commerce_order', $order_object, 'commerce_line_items');
      $line_item_ids = array();
      foreach ($fields_line_items as $field_line_item) {
        $line_item_ids[] = $field_line_item['line_item_id'];
      }
      $line_items = commerce_line_item_load_multiple($line_item_ids, array('type' => 'product'));
      $order_object_items = array();
      foreach ($line_items as $line_item) {
        $product_id = field_get_items('commerce_line_item', $line_item, 'commerce_product')[0]['product_id'];
        $product = commerce_product_load($product_id);
        $order_object_items[] = array(
          'item_id' => $line_item->line_item_id,
          'product_id' => $product_id,
          'code' => $product->sku,
          'sku' => $product->sku,
          'name' => $product->title,
          'quantity' => $line_item->quantity,
          'unit_price' => field_get_items('commerce_line_item', $line_item, 'commerce_unit_price')[0]['amount'] / 100,
          'weight' => 0,  // Drupal Commerce has no weight setting, need 3rd party module or custom field. This is single product value.
        );
      }
      $order_object_totals = array();
      $order_total_components = field_get_items('commerce_order', $order_object, 'commerce_order_total')[0]['data']['components'];
      foreach ($order_total_components as $order_total_component_key => $order_total_component) {
        $order_object_totals[] = array(
          'id' => $order_total_component_key,
          'name' => $order_total_component['name'],
          'class' => $order_total_component['name'],
          'value' => $order_total_component['price']['amount'] / 100,
          'impact' => ($order_total_component['name'] == 'base_price') ? 'none' : 'add',
        );
      }
      $orders[] = array(
        'order_number' => $order_object->order_id,
        'order_date' => gmdate("Y-m-d\TH:i:s", $order_object->created),
        'last_modified' => gmdate("Y-m-d\TH:i:s", $order_object->changed),
        'shipping_method' => 'deliver',  // TODO: need connect to commerce_shipping module.
        'status_code' => $order_object->status,
        'customer_id' => $order_object->uid,
        'shipping_address' => array(
          'full_name' => $customer_address_shipping['first_name'] . ' ' . $customer_address_shipping['last_name'],
          'street1' => $customer_address_shipping['thoroughfare'],
          'street2' => $customer_address_shipping['premise'],
          'street3' => $customer_address_shipping['sub_premise'],
          'city' => $customer_address_shipping['locality'],
          'postal_code' => $customer_address_shipping['postal_code'],
          'country' => $customer_address_shipping['country'],
        ),
        'billing_address' => array(
          'full_name' => $customer_address_billing['first_name'] . ' ' . $customer_address_billing['last_name'],
          'street1' => $customer_address_billing['thoroughfare'],
          'street2' => $customer_address_billing['premise'],
          'street3' => $customer_address_billing['sub_premise'],
          'city' => $customer_address_billing['locality'],
          'postal_code' => $customer_address_billing['postal_code'],
          'country' => $customer_address_billing['country'],
        ),
        'items' => $order_object_items,
        'totals' => $order_object_totals,
        'grand_total' => field_get_items('commerce_order', $order_object, 'commerce_order_total')[0]['amount'] / 100,
      );
    }
  }

  commerce_shipworks_write_start_tag("Orders");
  foreach ($orders as $order)
  {
    commerce_shipworks_write_start_tag("Order");
      commerce_shipworks_write_element("OrderNumber", $order['order_number']);
      commerce_shipworks_write_element("OrderDate", $order['order_date']);
      commerce_shipworks_write_element("LastModified", $order['last_modified']);
      commerce_shipworks_write_element("ShippingMethod", $order['shipping_method']);
      commerce_shipworks_write_element("StatusCode", $order['status_code']);
      commerce_shipworks_write_element("CustomerID", $order['customer_id']);
      commerce_shipworks_write_start_tag("ShippingAddress");
        commerce_shipworks_write_element("FullName", $order['shipping_address']['full_name']);
        commerce_shipworks_write_element("Street1", $order['shipping_address']['street1']);
        commerce_shipworks_write_element("Street2", $order['shipping_address']['street2']);
        commerce_shipworks_write_element("Street3", $order['shipping_address']['street3']);
        commerce_shipworks_write_element("City", $order['shipping_address']['city']);
        commerce_shipworks_write_element("PostalCode", $order['shipping_address']['postal_code']);
        commerce_shipworks_write_element("Country", $order['shipping_address']['country']);
      commerce_shipworks_write_close_tag("ShippingAddress");
      commerce_shipworks_write_start_tag("BillingAddress");
        commerce_shipworks_write_element("FullName", $order['billing_address']['full_name']);
        commerce_shipworks_write_element("Street1", $order['billing_address']['street1']);
        commerce_shipworks_write_element("Street2", $order['billing_address']['street2']);
        commerce_shipworks_write_element("Street3", $order['billing_address']['street3']);
        commerce_shipworks_write_element("City", $order['billing_address']['city']);
        commerce_shipworks_write_element("PostalCode", $order['billing_address']['postal_code']);
        commerce_shipworks_write_element("Country", $order['billing_address']['country']);
      commerce_shipworks_write_close_tag("BillingAddress");
      commerce_shipworks_write_start_tag("Items");
      $items = $order['items'];
      foreach ($items as $item) {
        commerce_shipworks_write_start_tag("Item");
          commerce_shipworks_write_element("ItemID", $item['item_id']);
          commerce_shipworks_write_element("ProductID", $item['product_id']);
          commerce_shipworks_write_element("Code", $item['code']);
          commerce_shipworks_write_element("SKU", $item['sku']);
          commerce_shipworks_write_element("Name", $item['name']);
          commerce_shipworks_write_element("Quantity", (int)$item['quantity']);
          commerce_shipworks_write_element("UnitPrice", $item['unit_price']);
          commerce_shipworks_write_element("Weight", $item['weight']);
        commerce_shipworks_write_close_tag("Item");
      }
      commerce_shipworks_write_close_tag("Items");
      commerce_shipworks_write_start_tag("Totals");
        $totals = $order['totals'];
        foreach ($totals as $total) {
          commerce_shipworks_write_order_total($total['name'], $total['value'], $total['class'], $total['impact']);
        }
        commerce_shipworks_write_order_total(t('Grand total'), $order['grand_total'], 'grand_total', 'none');
      commerce_shipworks_write_close_tag("Totals");
    commerce_shipworks_write_close_tag("Order");
  }
  commerce_shipworks_write_close_tag("Orders");
}

/**
 * Writes a single order total
 */
function commerce_shipworks_write_order_total($name, $value, $class, $impact = "add") {
  if ($value > 0) {
    commerce_shipworks_write_full_element("Total", $value, array("name" => $name, "class" => $class, "impact" => $impact));
  }
}

/**
 * Check to see if admin functions exist.  And if so, determine if the user has access.
 */
function commerce_shipworks_check_admin_login() {
  $api_username = variable_get('commerce_shipworks_api_username', '');
  $api_password = variable_get('commerce_shipworks_api_password', '');
  $post_username = isset($_REQUEST['username']) ? $_REQUEST['username'] : '';
  $post_password = isset($_REQUEST['password']) ? $_REQUEST['password'] : '';
  if ($api_username && $api_password && $api_username == $post_username && $api_password == $post_password) {
    return TRUE;
  } else {
    return FALSE;
  }
}

/**
 * Write xml documenta declaration
 */
function commerce_shipworks_write_xml_declaration() {
  echo "<?xml version=\"1.0\" standalone=\"yes\" ?>";
}

/**
 * Write starting xml tag
 */
function commerce_shipworks_write_start_tag($tag, $attributes = null) {
  echo '<' . $tag;
  if ($attributes != null) {
    echo ' ';
    foreach ($attributes as $name => $attribValue) {
      echo $name. '="'. htmlspecialchars($attribValue). '" ';
    }
  }
  echo '>';
}

/**
 * Write closing xml tag
 */
function commerce_shipworks_write_close_tag($tag) {
  echo '</' . $tag . '>';
}

/**
 * Output the given tag\value pair
 */
function commerce_shipworks_write_element($tag, $value) {
  commerce_shipworks_write_start_tag($tag);
  echo htmlspecialchars($value);
  commerce_shipworks_write_close_tag($tag);
}

/**
 * Outputs the given name/value pair as an xml tag with attributes
 */
function commerce_shipworks_write_full_element($tag, $value, $attributes) {
  echo '<'. $tag. ' ';
  foreach ($attributes as $name => $attribValue) {
    echo $name. '="'. htmlspecialchars($attribValue). '" ';
  }
  echo '>';
  echo htmlspecialchars($value);
  commerce_shipworks_write_close_tag($tag);
}

/**
 * Function used to output an error and quit.
 */
function commerce_shipworks_output_error($code, $error) {
  commerce_shipworks_write_start_tag("Error");
  commerce_shipworks_write_element("Code", $code);
  commerce_shipworks_write_element("Description", $error);
  commerce_shipworks_write_close_tag("Error");
}

/**
 * Converts an xml datetime string to unix timestamp
 */
function commerce_shipworks_to_timestamp($sqlUtc) {
  $pattern = "/^(\d{4})-(\d{2})-(\d{2})\T(\d{2}):(\d{2}):(\d{2})$/i";
  if (preg_match($pattern, $sqlUtc, $dt)) {
    $unixUtc = gmmktime($dt[4], $dt[5], $dt[6], $dt[2], $dt[3], $dt[1]);
    return $unixUtc;
  }
  return FALSE;
}

/**
 * Converts an xml datetime string to sql date time
 */
function commerce_shipworks_to_local_sql_date($sqlUtc) {
  if ($unixUtc = commerce_shipworks_to_timestamp($sqlUtc)) {
    return date("Y-m-d H:i:s", $unixUtc);
  }
  return $sqlUtc . " (invalid)";
}

